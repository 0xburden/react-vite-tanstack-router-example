/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as OtherImport } from './routes/other'
import { Route as IndexImport } from './routes/index'
import { Route as CatsIndexImport } from './routes/cats.index'
import { Route as CatsSplatImport } from './routes/cats.$'

// Create/Update Routes

const OtherRoute = OtherImport.update({
  id: '/other',
  path: '/other',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CatsIndexRoute = CatsIndexImport.update({
  id: '/cats/',
  path: '/cats/',
  getParentRoute: () => rootRoute,
} as any)

const CatsSplatRoute = CatsSplatImport.update({
  id: '/cats/$',
  path: '/cats/$',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/other': {
      id: '/other'
      path: '/other'
      fullPath: '/other'
      preLoaderRoute: typeof OtherImport
      parentRoute: typeof rootRoute
    }
    '/cats/$': {
      id: '/cats/$'
      path: '/cats/$'
      fullPath: '/cats/$'
      preLoaderRoute: typeof CatsSplatImport
      parentRoute: typeof rootRoute
    }
    '/cats/': {
      id: '/cats/'
      path: '/cats'
      fullPath: '/cats'
      preLoaderRoute: typeof CatsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/other': typeof OtherRoute
  '/cats/$': typeof CatsSplatRoute
  '/cats': typeof CatsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/other': typeof OtherRoute
  '/cats/$': typeof CatsSplatRoute
  '/cats': typeof CatsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/other': typeof OtherRoute
  '/cats/$': typeof CatsSplatRoute
  '/cats/': typeof CatsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/other' | '/cats/$' | '/cats'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/other' | '/cats/$' | '/cats'
  id: '__root__' | '/' | '/other' | '/cats/$' | '/cats/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  OtherRoute: typeof OtherRoute
  CatsSplatRoute: typeof CatsSplatRoute
  CatsIndexRoute: typeof CatsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  OtherRoute: OtherRoute,
  CatsSplatRoute: CatsSplatRoute,
  CatsIndexRoute: CatsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/other",
        "/cats/$",
        "/cats/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/other": {
      "filePath": "other.tsx"
    },
    "/cats/$": {
      "filePath": "cats.$.tsx"
    },
    "/cats/": {
      "filePath": "cats.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
